# -*- coding: utf-8 -*-

import wx
import wx.xrc
from data.exploits import *

try:
    from data.custom import custom_exploits
    custom_exploits_loaded = True
except ImportError:
    custom_exploits_loaded = False

###########################################################################
## Class AddExploitDialog
###########################################################################

class AddExploitDialog(wx.Dialog):
    def __init__(self, parent, career=None, title=u"Add Exploit"):
        wx.Dialog.__init__(self, parent, id=wx.ID_ANY, title=title, pos=wx.DefaultPosition,
                           size=wx.Size(765, 313), style=wx.DEFAULT_DIALOG_STYLE)

        self.SetSizeHints(wx.DefaultSize, wx.DefaultSize)

        bs_aed_main = wx.BoxSizer(wx.VERTICAL)

        self.p_aed_edit_exploits = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL)
        bs_aed_1 = wx.BoxSizer(wx.VERTICAL)

        bs_aed_exploit_desc = wx.BoxSizer(wx.HORIZONTAL)

        sbs_aed_exploits = wx.StaticBoxSizer(wx.StaticBox(self.p_aed_edit_exploits, wx.ID_ANY, u"Exploits"),
                                             wx.HORIZONTAL)

        bs_aed_rb = wx.BoxSizer(wx.VERTICAL)

        self.rb_aed_universal = wx.RadioButton(sbs_aed_exploits.GetStaticBox(), wx.ID_ANY, u"Universal",
                                               wx.DefaultPosition, wx.DefaultSize, wx.RB_GROUP)
        bs_aed_rb.Add(self.rb_aed_universal, 0, wx.ALL, 5)

        self.rb_aed_career = wx.RadioButton(sbs_aed_exploits.GetStaticBox(), wx.ID_ANY, u"Career", wx.DefaultPosition,
                                            wx.DefaultSize, 0)
        bs_aed_rb.Add(self.rb_aed_career, 0, wx.ALL, 5)

        self.rb_aed_android = wx.RadioButton(sbs_aed_exploits.GetStaticBox(), wx.ID_ANY, u"Android", wx.DefaultPosition,
                                             wx.DefaultSize, 0)
        bs_aed_rb.Add(self.rb_aed_android, 0, wx.ALL, 5)

        self.rb_aed_custom = wx.RadioButton(sbs_aed_exploits.GetStaticBox(), wx.ID_ANY, u"Custom", wx.DefaultPosition,
                                            wx.DefaultSize, 0)
        bs_aed_rb.Add(self.rb_aed_custom, 0, wx.ALL, 5)

        sbs_aed_exploits.Add(bs_aed_rb, 0, wx.EXPAND, 5)

        bs_aed_exploits_list_and_rb = wx.BoxSizer(wx.HORIZONTAL)

        lb_aed_exploit_listChoices = []
        self.lb_aed_exploit_list = wx.ListBox(sbs_aed_exploits.GetStaticBox(), wx.ID_ANY, wx.DefaultPosition,
                                              wx.DefaultSize, lb_aed_exploit_listChoices, 0)
        self.lb_aed_exploit_list.SetMinSize(wx.Size(-1, 120))

        bs_aed_exploits_list_and_rb.Add(self.lb_aed_exploit_list, 0, wx.ALL, 5)

        sbs_aed_exploits.Add(bs_aed_exploits_list_and_rb, 0, wx.EXPAND, 5)

        bs_aed_exploit_desc.Add(sbs_aed_exploits, 0, wx.EXPAND, 5)

        sbs_aed_exploit_desc = wx.StaticBoxSizer(wx.StaticBox(self.p_aed_edit_exploits, wx.ID_ANY, u"Description"),
                                                 wx.VERTICAL)

        self.tc_aed_exploit_desc = wx.TextCtrl(sbs_aed_exploit_desc.GetStaticBox(), wx.ID_ANY, wx.EmptyString,
                                               wx.DefaultPosition, wx.DefaultSize, wx.TE_MULTILINE | wx.TE_READONLY)
        self.tc_aed_exploit_desc.SetMinSize(wx.Size(-1, 140))

        sbs_aed_exploit_desc.Add(self.tc_aed_exploit_desc, 0, wx.ALL | wx.EXPAND, 5)

        bs_aed_exploit_desc.Add(sbs_aed_exploit_desc, 2, wx.EXPAND, 5)

        bs_aed_1.Add(bs_aed_exploit_desc, 1, wx.EXPAND, 5)

        bs_aed_buttons = wx.BoxSizer(wx.HORIZONTAL)

        self.b_aed_ok = wx.Button(self.p_aed_edit_exploits, wx.ID_ANY, u"OK", wx.DefaultPosition, wx.DefaultSize, 0)
        bs_aed_buttons.Add(self.b_aed_ok, 0, wx.ALL, 5)

        self.b_aed_cancel = wx.Button(self.p_aed_edit_exploits, wx.ID_ANY, u"Cancel", wx.DefaultPosition,
                                      wx.DefaultSize, 0)
        bs_aed_buttons.Add(self.b_aed_cancel, 0, wx.ALL, 5)

        bs_aed_1.Add(bs_aed_buttons, 0, wx.ALIGN_RIGHT, 5)

        self.p_aed_edit_exploits.SetSizer(bs_aed_1)
        self.p_aed_edit_exploits.Layout()
        bs_aed_1.Fit(self.p_aed_edit_exploits)
        bs_aed_main.Add(self.p_aed_edit_exploits, 1, wx.EXPAND | wx.ALL, 5)

        self.SetSizer(bs_aed_main)
        self.Layout()

        self.Centre(wx.BOTH)

        # Connect Events
        self.rb_aed_universal.Bind(wx.EVT_RADIOBUTTON, self.show_exploits)
        self.rb_aed_career.Bind(wx.EVT_RADIOBUTTON, self.show_exploits)
        self.rb_aed_android.Bind(wx.EVT_RADIOBUTTON, self.show_exploits)
        self.rb_aed_custom.Bind(wx.EVT_RADIOBUTTON, self.show_exploits)
        self.lb_aed_exploit_list.Bind(wx.EVT_LISTBOX, self.on_exploit_select)
        self.b_aed_ok.Bind(wx.EVT_BUTTON, self.on_ok)
        self.b_aed_cancel.Bind(wx.EVT_BUTTON, self.on_cancel)

        self.career = career

        if self.career is None:
            self.rb_aed_career.Enable(False)
            self.rb_aed_career.Hide()
        if not custom_exploits_loaded:
            self.rb_aed_custom.Enable(False)
            self.rb_aed_custom.Hide()

        self.show_exploits(None)
        self.on_exploit_select(None)

    def __del__(self):
        pass

    ###########################################
    # Additional AddExploitsDialog init stuff #
    ###########################################
    # if career is None:
    #     self.rb_aed_career.Enable(False)
    #     self.rb_aed_career.Hide()
    # if not custom_exploits_loaded:
    #     self.rb_aed_custom.Enable(False)
    #     self.rb_aed_custom.Hide()
    #
    # self.show_exploits(None)
    # self.on_exploit_select(None)

    ###############################
    # AddExploitsDialog Functions #
    ###############################
    def get_exploit_list(self):
        # exploit_list = None
        # if self.rb_aed_universal.GetValue():
        #     exploit_list = exploits_universal.exploit_universal_list
        # elif self.rb_aed_android.GetValue():
        #     exploit_list = exploits_android.exploit_android_list
        # elif self.rb_aed_career.GetValue():
        #     exploit_list = self.career.available_exploits
        # elif self.rb_aed_custom.GetValue():
        #     exploit_list = custom_exploits.custom_exploit_list
        # return exploit_list
        if self.rb_aed_android.GetValue():
            exploit_list = exploits_android.exploit_android_list
        elif self.rb_aed_career.GetValue():
            exploit_list = self.career.available_exploits
        elif self.rb_aed_custom.GetValue():
            exploit_list = custom_exploits.custom_exploit_list
        else:
            exploit_list = exploits_universal.exploit_universal_list
        return exploit_list

    def get_list_source(self):
        list_source = None
        if self.rb_aed_universal.GetValue():
            list_source = 'universal'
        elif self.rb_aed_android.GetValue():
            list_source = 'android'
        elif self.rb_aed_career.GetValue():
            list_source = 'career'
        elif self.rb_aed_custom.GetValue():
            list_source = 'custom'
        return list_source

    def show_exploits(self, event):
        exploit_list = self.get_exploit_list()
        self.lb_aed_exploit_list.Clear()

        for exploit in exploit_list:
            self.lb_aed_exploit_list.Append(exploit['Name'])

        self.lb_aed_exploit_list.SetSelection(0)
        self.on_exploit_select(None)

    def on_exploit_select(self, event):
        exploit_list = self.get_exploit_list()
        selected_exploit = self.lb_aed_exploit_list.GetSelection()
        self.tc_aed_exploit_desc.SetValue(exploit_list[selected_exploit]['Desc'])

    def on_ok(self, event):
        self.EndModal(wx.ID_OK)

    def on_cancel(self, event):
        self.EndModal(wx.ID_CANCEL)