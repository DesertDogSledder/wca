from data.exploits import *
try:
    from custom import custom_exploits
    custom_exploits_loaded = True
except ImportError:
    custom_exploits_loaded = False

from PyQt5 import QtWidgets
from lib.gui_qt.exploit_dialog_ui import Ui_ExploitDialog


class ExploitDialog(QtWidgets.QDialog, Ui_ExploitDialog):
    def __init__(self, career=None, parent=None):
        super(ExploitDialog, self).__init__(parent)
        self.setupUi(self)

        self.career = career

        self.exploit_list = []
        self.exploit_source = ''

        self.rb_ed_universal.toggled.connect(self.on_source_select)
        self.rb_ed_career.toggled.connect(self.on_source_select)
        self.rb_ed_android.toggled.connect(self.on_source_select)
        self.rb_ed_psionics.toggled.connect(self.on_source_select)
        self.rb_ed_custom.toggled.connect(self.on_source_select)

        self.lw_ed_exploits_val.currentRowChanged.connect(self.on_exploit_select)

        if not custom_exploits_loaded:
            self.rb_ed_custom.setDisabled(True)
        if self.career is None:
            self.rb_ed_career.setDisabled(True)
            self.rb_ed_career.setVisible(False)

        self.rb_ed_universal.setChecked(True)

    def on_source_select(self, checked):
        # Check if checked is True so this code isn't fully executed twice
        if checked:
            if self.rb_ed_universal.isChecked():
                self.exploit_list = exploits_universal.exploit_universal_list
                self.exploit_source = 'universal'
            elif self.rb_ed_career.isChecked():
                self.exploit_list = self.career.available_exploits
                self.exploit_source = 'career'
            elif self.rb_ed_android.isChecked():
                self.exploit_list = exploits_android.exploit_android_list
                self.exploit_source = 'android'
            elif self.rb_ed_psionics.isChecked():
                self.exploit_list = exploits_psionic.exploit_psionic_list
                self.exploit_source = 'psionics'
            elif self.rb_ed_custom.isChecked():
                self.exploit_list = custom_exploits.custom_exploit_list
                self.exploit_source = 'custom'

        self.lw_ed_exploits_val.clear()

        for exploit in self.exploit_list:
            self.lw_ed_exploits_val.addItem(exploit['Name'])

        self.lw_ed_exploits_val.setCurrentRow(0)

    def on_exploit_select(self, current_row):
        self.pte_ed_exploit_desc.clear()
        if current_row != -1:
            self.pte_ed_exploit_desc.setPlainText(self.exploit_list[current_row]['Desc'])
